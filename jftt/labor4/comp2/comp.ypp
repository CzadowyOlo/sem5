%{
    #include <iostream>
    #include <string>
    #include <cstdlib> // for atoi
    using namespace std;

    #define YYDEBUG 1
    extern int yylex(void);
    extern int yyparse();
    extern FILE *yyin;
    void yyerror(std::string s);
%}

/* Tell bison to give descriptive error messages. */
%define parse.error verbose

/* These are the different "semantic values" that a token can have. */
%union {
    int val; 
    const char* sym;
};

%token <val> NUM
%token <sym> IDENTIFIER
%token <sym> ASSIGN LP RP COMMA SEMICOLON
%token <sym> ADD SUB MUL DIV MOD
%token <sym> EQ NEQ LEQ GEQ LESS GREATER
%token <sym> PROCEDURE IS_VAR IS_BEGIN BEGINN END PROGRAM_IS_VAR PROGRAM_IS_BEGIN IF THEN ELSE ENDIF WHILE DO ENDWHILE REPEAT UNTIL READ WRITE

/* Do zrobienia */
/* %token ERR      */
/* prawdopodobnie problem errorów zostanie rozwiązany przez kilka typów ERR_ */

%left SUB ADD
%left MUL DIV
%left MOD

%%

input:
    %empty
|   program_all

program_all:
    procedures main

procedures:
    procedures PROCEDURE proc_head IS_VAR declarations BEGINN commands END
|   procedures PROCEDURE proc_head IS_BEGIN commands END
|   %empty

main:
    PROGRAM_IS_VAR declarations BEGINN commands END
|   PROGRAM_IS_BEGIN commands END

commands:
    commands command
|   command

command:
    IDENTIFIER ASSIGN expression SEMICOLON
|   IF condition THEN commands ELSE commands ENDIF
|   IF condition THEN commands ENDIF
|   WHILE condition DO commands ENDWHILE
|   REPEAT commands UNTIL condition SEMICOLON
|   proc_head SEMICOLON
|   READ IDENTIFIER SEMICOLON
|   WRITE value SEMICOLON

proc_head:
    IDENTIFIER LP declarations RP

declarations:
    declarations COMMA IDENTIFIER
|   IDENTIFIER

expression:
    value
|   value ADD value
|   value SUB value
|   value MUL value
|   value DIV value
|   value MOD value

condition:
    value EQ value
|   value GREATER value
|   value LESS value
|   value GEQ value
|   value LEQ value
|   value NEQ value

value:
    NUM
|   IDENTIFIER

%%

void yyerror(std::string s){
  std::cout << "Błąd" << std::endl;
}

int main(int argc, char const * argv[]){
  
    if(argc < 2){
        cout << "Nie podano pliku!" << endl;
        return -1;
    }
    FILE * data;
    data = fopen( argv[1], "r" );
    if( !data ){
        cout << "Nie ma takiego pliku!" << endl; 
        return -1;
    }

    yyin = data;    
    yydebug = 1;
    yyparse();
    fclose(data);
    return 0;
}
